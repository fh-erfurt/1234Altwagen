@startuml
title 1234Altwagen - Class Diagram


class CarManager {
    {static} -instance: CarManager
    -cars: ArrayList<Car>
    {static} +getInstance(): CarManager
    {static} +clearInstance(): void
    +addNewCar(String, String, int, String, String, String, Location, CarStatus): Car
    +addOrChangeCar(Car): boolean
    +deleteCar(String): void
    +getCarByChassisNumber(String): Car
    +listCarsByStatus(CarStatus): ArrayList<Car>
    +listCarsByLocation(Location): ArrayList<Car>
    -getIndexOfCarWithChassisNumber(String): int
}

class Car {
    -chassisNumber: string
    -constructionYear: int
    -drivenKM: int
    -price: float
    -brand: string
    -model: string
    -note: string
    -location: Location
    -status: CarStatus
    +Car(String, String, int, String, String, String, Location, CarStatus)
    {method} getter und setter
    +equals(Object): boolean
}

enum CarStatus {
    +FOR_SALE
    +NOT_READY_FOR_SALE
    +ON_ACTIVE_REQUEST
    +SOLD
    +INACTIVE
}

class Address {
    -country: string
    -city: string
    -zip: string
    -street: string
    -houseNumber: string
    +Address(int, String, String, String, String, String, String)
    {method} getter und setter
    +equals(Object): boolean
}

class Location {
    -address: Address
    -name: string
    -maxCars: int
    -carCount: int
    +Location(Address, String, int, int)
    {method} getter und setter
    +addCar(Car): boolean
    +decreaseCarCount(): boolean
    +equals(Object): boolean
    -increaseCarCount(): boolean
}

class LocationManager {
    {static} -instance: LocationManager
    -locations: ArrayList<Location>
    {static} +getInstance(): LocationManager
    {static} +clearInstance(): void
    +addLocation(String, String, String, String, String, String, int, int): Location
    +deleteLocation(Address, String): boolean
    +getLocationsWithAvailableSpace(int): ArrayList<Location>
}

class Request {
    -car: Car
    -employee: Employee
    -customer: Customer
    -float: price
    -type: RequestType
    -status: RequestStatus
    +Request(RequestType, Car, Customer, price)
    {method} getter und setter
}

class RequestManager {
    {static} -instance: RequestManager
    -requests: ArrayList<Request>
    {static} +getInstance(): RequestManager
    {static} +clearInstance(): void
    +addRequest(RequestType, Car, Customer, float): Request
    +getRequestsByStatus(RequestStatus): ArrayList<Request>
    +getRequestsByType(RequestType): ArrayList<Request>
    +getRequestsByUser(User): ArrayList<Request>
}

enum RequestStatus {
    +PENDING
    +ACCEPTED
    +DENIED
    +CANCELLED
}

enum RequestType {
    +BUY
    +SELL
}

class Customer {
    -requestCount: int
    -maxRequests: int
    +Customer(String, String, String, String, Address)
    +cancelRequest(Request): boolean
    +decreaseRequestCount(): void
    +getActiveRequestCount(): int
    +getMaximumRequestCount(): int
    +requestBuyCar(Car): Request
    +requestSellCar(String, String, int, String, String, String, float): Request
    +requestSellCar(Car): Request
    -createRequest(Car, RequestType, float): Request
}

class Employee {
    +Employee(String, String, String, String, Address)
    +sellCar(Car, float): bool
    +acceptRequest(Request): bool
    +changeCarLocation(Car, Location): boolean
    +denyRequest(Request): bool
    +getLocationsWithAvailableSpace(int): ArrayList<Location>
    +listPendingRequests(): ArrayList<Request>
}

class User {
    #firstname: string
    #lastname: string
    #eMail: string
    #password: string
    #userAddress: Address
    +User(String, String, String, String, Address)
    {method} getter und setter
    +equals(Object): boolean
    +listCarsForSale(): ArrayList<Car>
    +listMyRequests(): ArrayList<Requests>
}

class UserManager {
    {static} -instance: UserManager
    -users: ArrayList<User>
    {static} +getInstance(): UserManager
    {static} +clearInstance(): void
    +registerCustomer(String, String, String, String, String, String, String, String, String): Customer 
    +registerEmployee(String, String, String, String, String, String, String, String, String): Employee
    +deleteUser(String): boolean
    +getUserByMail(String): User
    -registerUser(User, boolean): User
}

Customer --> User
Employee --> User

Car -- CarManager
Request -- RequestManager
User -- UserManager
Address -- User
Location -- Address
Location -- LocationManager
Car -- Location
Car -- CarStatus
Car -- Request
Request -- Customer
Request -- Employee
Request -- RequestStatus
Request -- RequestType
@enduml
